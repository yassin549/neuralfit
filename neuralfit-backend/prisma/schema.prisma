// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  messages      Message[]
  hostedSpaces      Space[]            @relation("HostedSpaces")
  therapistSessions TherapistSession[]
  stats             UserStats?
  conversations     ConversationParticipant[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?
  timezone  String?  // e.g., "America/New_York"
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Space {
  id          String    @id @default(cuid())
  hostId      String
  title       String
  description String?
  startTime   DateTime  @default(now())
  duration    Int?      // Duration in minutes
  state       String    @default("upcoming") // upcoming, live, ended
  createdAt   DateTime  @default(now())
  messages    Message[]

  host User @relation("HostedSpaces", fields: [hostId], references: [id])
}

model Message {
  id          String   @id @default(cuid())
  spaceId     String?  // For space chats
  conversationId String?
  senderId    String
  body        String
  attachments Json?    // Array of attachment URLs
  createdAt   DateTime @default(now())

  space            Space?            @relation(fields: [spaceId], references: [id])
  sender           User              @relation(fields: [senderId], references: [id])
  therapistSession TherapistSession? @relation(fields: [therapistSessionId], references: [id])
  therapistSessionId String?
  conversation       Conversation?     @relation(fields: [conversationId], references: [id])
}

model TherapistSession {
  id            String    @id @default(cuid())
  userId        String
  therapistType String    @default("AI") // AI or HUMAN
  startTime     DateTime  @default(now())
  endTime       DateTime?
  createdAt     DateTime  @default(now())
  messages      Message[]

  user User @relation(fields: [userId], references: [id])
}

model UserStats {
  id              String   @id @default(cuid())
  userId          String   @unique
  sessionsCount   Int      @default(0)
  minutesSpoken   Int      @default(0)
  currentStreak   Int      @default(0)
  longestStreak   Int      @default(0)
  engagementScore Float    @default(0)
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Conversation {
  id           String    @id @default(cuid())
  name         String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
}
